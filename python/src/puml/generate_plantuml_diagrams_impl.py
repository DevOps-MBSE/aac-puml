"""The AaC Generate PlantUML Diagrams plugin implementation module."""

# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

# There may be some unused imports depending on the definition of the plugin...but that's ok
from os import path, makedirs
from typing import Any

from aac.context.language_context import LanguageContext
from aac.context.definition import Definition
from aac.context.source_location import SourceLocation
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
    MessageLevel,
)
from aac.in_out.files.aac_file import AaCFile
from aac.in_out.parser._parse_source import parse

# from puml.puml_helpers import (
#     generate_diagram_to_file,
#     get_model_content,
#     get_generated_file_name,
#     extract_aac_file_name,
# )


plugin_name = "Generate PlantUML Diagrams"
COMPONENT_STRING = "component"
OBJECT_STRING = "object"
SEQUENCE_STRING = "sequence"
REQUIREMENTS_STRING = "requirements"


def before_puml_component_check(
    architecture_file: str, output_directory: str, run_check
) -> ExecutionResult:
    """
    Run the Check AaC command before the puml-component command.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML component diagram.
        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the check command.
    """
    return run_check(architecture_file, False, False)


def puml_component(architecture_file, output_directory) -> ExecutionResult:
    """
    Business logic for allowing puml-component command to perform the conversion of an AaC-defined system to a PlantUML component diagram.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML component diagram.
        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the puml-component command.
    """
    architecture_file_path = path.abspath(architecture_file)
    parsed_file = parse(architecture_file)

    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []

    # def _generate_component_diagram(definitions: list[Definition]):
    #     for definition in parsed_file:
    #         if definition.get_root_key() == "model":
    #             models = []
    #             model_name = definition.name
    #             model_properties = get_model_content(definition, set())
    #             aac_file_name = extract_aac_file_name(architecture_file)
    #             generated_file_name = get_generated_file_name(aac_file_name, COMPONENT_STRING, model_name, output_directory)
    #             models.append(
    #                 {
    #                     "filename": generated_file_name,
    #                     "title": model_name,
    #                     "models": [model_properties],
    #                 }
    #             )
    #         return models

    # try:
    #     generate_to_file = generate_diagram_to_file(architecture_file_path=architecture_file_path,
    #                                            output_directory=output_directory,
    #                                            puml_type=COMPONENT_STRING,
    #                                            property_generator=_generate_component_diagram)
    #     generation_result_msg = ExecutionMessage(
    #         generate_to_file,
    #         MessageLevel.INFO,
    #         None,
    #         None,
    #     )

    # except Exception:
    #     generation_result_msg = ExecutionMessage(
    #         "The puml-component command for the Generate PlantUML Diagrams failed.",
    #         MessageLevel.ERROR,
    #         None,
    #         None,
    #     )

    # messages.append(generation_result_msg)
    messages.append(ExecutionMessage("Made it to puml-component command",
                    MessageLevel.INFO,
                    None,
                    None))

    return ExecutionResult(plugin_name, "puml-component", status, messages)


def before_puml_sequence_check(
    architecture_file: str, output_directory: str, run_check
) -> ExecutionResult:
    """
    Run the Check AaC command before the puml-sequence command.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined usecase from which
                                 to generate a PlantUML sequence diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the check command.
    """
    return run_check(architecture_file, False, False)


def puml_sequence(architecture_file, output_directory) -> ExecutionResult:
    """
    Business logic for allowing puml-sequence command to perform the conversion of an AaC-defined usecase to PlantUML sequence diagram.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined usecase from which
                                 to generate a PlantUML sequence diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.


    Returns:
        The results of the execution of the puml-sequence command.
    """

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The puml-sequence command for the Generate PlantUML Diagrams plugin has not been implemented yet.",
        MessageLevel.ERROR,
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "puml-sequence", status, messages)


def before_puml_object_check(
    architecture_file: str, output_directory: str, run_check
) -> ExecutionResult:
    """
    Run the Check AaC  command before the puml-object command.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML object diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the check command.
    """
    return run_check(architecture_file, False, False)


def puml_object(architecture_file, output_directory) -> ExecutionResult:
    """
    Business logic for allowing puml-object command to perform the conversion an AaC-defined system to PlantUML object diagram.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML object diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.


    Returns:
        The results of the execution of the puml-object command.
    """

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The puml-object command for the Generate PlantUML Diagrams plugin has not been implemented yet.",
        MessageLevel.ERROR,
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "puml-object", status, messages)


def before_puml_requirements_check(
    architecture_file: str, output_directory: str, run_check
) -> ExecutionResult:
    """
    Run the Check AaC command before the puml-requirements command.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML requirements diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the check command.
    """
    return run_check(architecture_file, False, False)


def puml_requirements(architecture_file, output_directory) -> ExecutionResult:
    """
    Business logic for allowing puml-requirements command to perform the conversion of an AaC-defined system to a requirements diagram in PlantUML format.

    Args:
        architecture_file (str): A path to a YAML file containing an AaC-defined system from which to
                                 generate a PlantUML requirements diagram.

        output_directory (str): The output directory into which the PlantUML (.puml) diagram file
                                will be written.

    Returns:
        The results of the execution of the puml-requirements command.
    """

    # TODO: implement plugin logic here
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []
    error_msg = ExecutionMessage(
        "The puml-requirements command for the Generate PlantUML Diagrams plugin has not been implemented yet.",
        MessageLevel.ERROR,
        None,
        None,
    )
    messages.append(error_msg)

    return ExecutionResult(plugin_name, "puml-requirements", status, messages)
